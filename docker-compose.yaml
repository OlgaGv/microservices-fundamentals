x-app-healthcheck-depends: &app-healthcheck-depends
    healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
        interval: 30s
        timeout: 15s
        retries: 5
        start_period: 120s

services:
    localstack:
        image: localstack/localstack
        container_name: localstack
        ports:
            - "${AWS_PORT}:4566"
        environment:
            - SERVICES=s3
            - AWS_DEFAULT_REGION=us-east-1
        volumes:
            - ./localstack-volume:/var/lib/localstack
        healthcheck:
            test: ["CMD", "curl", -f, "http://localhost:4566/_localstack/health"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 20s
        networks:
            - microservices-net

    elasticsearch:
        image: elasticsearch:7.17.3
        container_name: elasticsearch
        environment:
            - discovery.type=single-node
            - ES_JAVA_OPTS=-Xmx256m -Xms256m
            - xpack.security.enabled=false
        ports:
            - "9200:9200"
        healthcheck:
            test: [ "CMD-SHELL", "curl -f -X GET \"http://localhost:9200/_cluster/health?wait_for_status=green&timeout=1s\" || exit 1" ]
            interval: 30s
            timeout: 15s
            retries: 10
            start_period: 90s
        networks:
            - microservices-net

    logstash:
        image: logstash:7.17.3
        container_name: logstash
        ports:
            - "5000:5000"
        volumes:
            - ./monitoring/logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
        environment:
            - LS_JAVA_OPTS=-Xmx256m -Xms256m
        depends_on:
            elasticsearch:
                condition: service_healthy
        networks:
            - microservices-net

    kibana:
        image: docker.elastic.co/kibana/kibana:7.17.3
        container_name: kibana
        ports:
            - "5601:5601"
        environment:
            - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
        depends_on:
            elasticsearch:
                condition: service_healthy
        networks:
            - microservices-net

    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        ports:
            - "9090:9090"
        command:
            - "--config.file=/etc/prometheus/prometheus.yml"
        healthcheck:
            test: ["CMD-SHELL", "wget -q --spider http://localhost:9090/metrics || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 30s
        depends_on:
            eureka-server:
                condition: service_healthy
        volumes:
            - prometheus-data:/prometheus
            - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
        networks:
            - microservices-net

    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        ports:
            - "3000:3000"
        environment:
            - GF_SECURITY_ADMIN_USER=admin
            - GF_SECURITY_ADMIN_PASSWORD=admin
            - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
        volumes:
            - grafana-data:/var/lib/grafana
            - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
            - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
        depends_on:
            prometheus:
                condition: service_healthy
            elasticsearch:
                condition: service_healthy
        networks:
            - microservices-net

    resource-db:
        image: postgres:17-alpine
        container_name: resource-db
        environment:
            POSTGRES_DB: ${RESOURCE_DB_NAME}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        ports:
            - "5432:5432"
        volumes:
            - ./init-scripts/resource-db:/docker-entrypoint-initdb.d/ # Mount initialization scripts
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${RESOURCE_DB_NAME}" ]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - microservices-net

    song-db:
        image: postgres:17-alpine
        container_name: song-db
        environment:
            POSTGRES_DB: ${SONG_DB_NAME}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        ports:
            - "5433:5432"
        volumes:
            - ./init-scripts/song-db:/docker-entrypoint-initdb.d/ # Mount initialization scripts
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${SONG_DB_NAME}" ]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - microservices-net

    storage-db:
        image: postgres:17-alpine
        container_name: storage-db
        environment:
            POSTGRES_DB: ${STORAGE_DB_NAME}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        ports:
            - "5434:5432"
        volumes:
            - ./init-scripts/storage-db:/docker-entrypoint-initdb.d/ # Mount initialization scripts
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${STORAGE_DB_NAME}" ]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - microservices-net

    zookeeper:
        image: bitnami/zookeeper:latest
        container_name: zookeeper
        ports:
            - "2181:2181"
        environment:
            - ALLOW_ANONYMOUS_LOGIN=yes
        networks:
            - microservices-net

    kafka:
        image: bitnami/kafka:3.8
        container_name: kafka
        ports:
            - "9092:9092"
            - "29092:29092"
        environment:
            - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
            - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,INTERNAL://:29092
            - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,INTERNAL://kafka:29092
            - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
            - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
            - ALLOW_PLAINTEXT_LISTENER=yes
        depends_on:
            - zookeeper
        healthcheck:
            test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1"]
            interval: 20s
            timeout: 15s
            retries: 10
            start_period: 60s
        networks:
            - microservices-net

    eureka-server:
        build:
            context: ./eureka-server
            dockerfile: Dockerfile
        container_name: eureka-server
        ports:
            - "${EUREKA_SERVER_PORT}:8761"
        environment:
            SERVER_PORT: ${EUREKA_SERVER_PORT}
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 30s
        networks:
            - microservices-net

    api-gateway:
        build:
            context: ./api-gateway
            dockerfile: Dockerfile
        container_name: api-gateway
        ports:
            - "${API_GATEWAY_SERVER_PORT}:8765"
        environment:
            - SERVER_PORT=${API_GATEWAY_SERVER_PORT}
            - EUREKA_CLIENT_SERVICEURL=${EUREKA_CLIENT_SERVICEURL}
        depends_on:
            eureka-server:
                condition: service_healthy
        networks:
            - microservices-net

    resource-service:
        build:
            context: ./resource-service
            dockerfile: Dockerfile
        container_name: resource-service
        ports:
            - "${RESOURCE_SERVICE_PORT}:${SERVICE_INTERNAL_PORT}"
        environment:
            SPRING_DATASOURCE_URL: ${RESOURCE_DB_URL}
            SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
            SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
            SERVER_PORT: ${SERVICE_INTERNAL_PORT}
            SONG_SERVICE_URI: "http://song-service:8080"
            SPRING_FLYWAY_ENABLED: false
            DATABASE_HOST: ${RESOURCE_DB_HOST}
            EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL}
            SPRING_KAFKA_BOOTSTRAP_SERVERS: ${SPRING_KAFKA_BOOTSTRAP_SERVERS}
            AWS_ENDPOINT_URL: ${AWS_ENDPOINT_URL}
            AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
            AWS_SECRET_KEY: ${AWS_SECRET_KEY}
        depends_on:
            resource-db:
                condition: service_healthy
            kafka:
                condition: service_healthy
            eureka-server:
                condition: service_healthy
            localstack:
                condition: service_healthy
        <<: *app-healthcheck-depends
        networks:
            - microservices-net

    song-service:
        build:
            context: ./song-service
            dockerfile: Dockerfile
        container_name: song-service
#        deploy:
#            mode: replicated
#            replicas: 2
#        ports:
#            - "8081-8082:${SERVICE_INTERNAL_PORT}"
        ports:
            - "${SONG_SERVICE_PORT}:${SERVICE_INTERNAL_PORT}"
        environment:
            SPRING_DATASOURCE_URL: ${SONG_DB_URL}
            SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
            SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
            SERVER_PORT: ${SERVICE_INTERNAL_PORT}
            SPRING_FLYWAY_ENABLED: false
            DATABASE_HOST: ${SONG_DB_HOST}
            EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL}
        depends_on:
            song-db:
                condition: service_healthy
            eureka-server:
                condition: service_healthy
        <<: *app-healthcheck-depends
        networks:
            - microservices-net

    resource-processor:
        build:
            context: ./resource-processor
            dockerfile: Dockerfile
        container_name: resource-processor
        environment:
            RESOURCE_SERVICE_URL: "http://resource-service:${SERVICE_INTERNAL_PORT}"
            SONG_SERVICE_URL: "http://song-service:${SERVICE_INTERNAL_PORT}"
            SPRING_KAFKA_BOOTSTRAP_SERVERS: ${SPRING_KAFKA_BOOTSTRAP_SERVERS}
            SERVER_PORT: ${SERVICE_INTERNAL_PORT}
            EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL}
        depends_on:
            resource-service:
                condition: service_healthy
            song-service:
                condition: service_healthy
            kafka:
                condition: service_healthy
        <<: *app-healthcheck-depends
        networks:
            - microservices-net

    storage-service:
        build:
            context: ./storage-service
            dockerfile: Dockerfile
        container_name: storage-service
        ports:
            - "${STORAGE_SERVICE_PORT}:${SERVICE_INTERNAL_PORT}"
        environment:
            SPRING_DATASOURCE_URL: ${STORAGE_DB_URL}
            SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
            SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
            SERVER_PORT: ${SERVICE_INTERNAL_PORT}
            DATABASE_HOST: ${STORAGE_DB_HOST}
            EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL}
            AWS_ENDPOINT_URL: ${AWS_ENDPOINT_URL}
            AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
            AWS_SECRET_KEY: ${AWS_SECRET_KEY}
        depends_on:
            storage-db:
                condition: service_healthy
            eureka-server:
                condition: service_healthy
            localstack:
                condition: service_healthy
        <<: *app-healthcheck-depends
        networks:
            - microservices-net

networks:
    microservices-net:
        driver: bridge

volumes:
    grafana-data:
    prometheus-data: