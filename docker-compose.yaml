services:

    localstack:
        image: localstack/localstack
        ports:
            - "4566:4566"
        environment:
            - SERVICES=s3
            - AWS_DEFAULT_REGION=us-east-1
        volumes:
            - ./localstack-volume:/var/lib/localstack

    resource-db:
        image: postgres:17-alpine
        container_name: resource-db
        environment:
            POSTGRES_DB: ${RESOURCE_DB_NAME}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        ports:
            - "5432:5432"
        volumes:
            - ./init-scripts/resource-db:/docker-entrypoint-initdb.d/ # Mount initialization scripts

    song-db:
        image: postgres:17-alpine
        container_name: song-db
        environment:
            POSTGRES_DB: ${SONG_DB_NAME}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        ports:
            - "5433:5432"
        volumes:
            - ./init-scripts/song-db:/docker-entrypoint-initdb.d/ # Mount initialization scripts

    zookeeper:
        image: bitnami/zookeeper:3.9
        container_name: zookeeper
        ports:
            - "2181:2181"
        environment:
            - ALLOW_ANONYMOUS_LOGIN=yes

    kafka:
        image: bitnami/kafka:3.8
        container_name: kafka
        ports:
            - "9092:9092"
        environment:
            - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
            - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
            - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
            - ALLOW_PLAINTEXT_LISTENER=yes
        depends_on:
            - zookeeper

#    eureka-server:
#        build:
#            context: ./eureka-server
#            dockerfile: Dockerfile
#        container_name: eureka-server
#        ports:
#            - "8761:8761"
#        environment:
#            SERVER_PORT: 8761

#    resource-service:
#        build:
#            context: ./resource-service
#            dockerfile: Dockerfile
#        container_name: resource-service
#        ports:
#            - "${RESOURCE_SERVICE_PORT}:${SERVICE_INTERNAL_PORT}"
#        environment:
#            SPRING_DATASOURCE_URL: ${RESOURCE_DB_URL}
#            SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
#            SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
#            SERVER_PORT: ${SERVICE_INTERNAL_PORT}
#            SONG_SERVICE_URI: "http://song-service:8080"
#            SPRING_FLYWAY_ENABLED: false
#            DATABASE_HOST: ${RESOURCE_DB_HOST}
#            EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL}
#            AWS_ENDPOINT_URL: ${AWS_ENDPOINT_URL}
#            AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
#            AWS_SECRET_KEY: ${AWS_SECRET_KEY}
#        depends_on:
#            resource-db:
#                condition: service_started
#            eureka-server:
#                condition: service_started

#    song-service:
#        build:
#            context: ./song-service
#            dockerfile: Dockerfile
#        container_name: song-service
#        deploy:
#            mode: replicated
#            replicas: 2
#        ports:
#            - "8081-8082:${SERVICE_INTERNAL_PORT}"
#        ports:
#            - "${SONG_SERVICE_PORT}:${SERVICE_INTERNAL_PORT}"
#        environment:
#            SPRING_DATASOURCE_URL: ${SONG_DB_URL}
#            SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
#            SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
#            SERVER_PORT: ${SERVICE_INTERNAL_PORT}
#            SPRING_FLYWAY_ENABLED: false
#            DATABASE_HOST: ${SONG_DB_HOST}
#            EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL}
#        depends_on:
#            song-db:
#                condition: service_started
#            eureka-server:
#                condition: service_started

#    resource-processor:
#        build:
#            context: ./resource-processor
#            dockerfile: Dockerfile
#        container_name: resource-processor
#        environment:
#            RESOURCE_SERVICE_URL: "http://resource-service:${SERVICE_INTERNAL_PORT}"
#            SONG_SERVICE_URL: "http://song-service:${SERVICE_INTERNAL_PORT}"
#            SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
#            SERVER_PORT: ${RESOURCE_PROCESSOR_PORT}
#        depends_on:
#            - resource-service
#            - song-service
#            - kafka
